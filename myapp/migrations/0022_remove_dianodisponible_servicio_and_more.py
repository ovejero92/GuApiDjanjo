# Generated by Django 5.2.3 on 2025-08-04 07:42

import django.db.models.deletion
from django.db import migrations, models

def crear_profesionales_y_reasignar_datos(apps, schema_editor):
    """
    Esta es nuestra lógica personalizada para migrar los datos existentes.
    """
    # Obtenemos versiones históricas de los modelos para no tener conflictos
    Servicio = apps.get_model('myapp', 'Servicio')
    Profesional = apps.get_model('myapp', 'Profesional')
    HorarioLaboral = apps.get_model('myapp', 'HorarioLaboral')
    DiaNoDisponible = apps.get_model('myapp', 'DiaNoDisponible')
    Turno = apps.get_model('myapp', 'Turno')

    for servicio in Servicio.objects.all():
        # 1. Creamos un Profesional por defecto para este Servicio
        profesional_obj = Profesional.objects.create(
            servicio=servicio,
            nombre=f"{servicio.nombre} (Principal)"
        )

        # 2. Reasignamos Horarios y Días de Bloqueo a este nuevo profesional
        # Usamos _set para las relaciones inversas que ya no existen
        HorarioLaboral.objects.filter(servicio_id=servicio.id).update(profesional_id=profesional_obj.id)
        DiaNoDisponible.objects.filter(servicio_id=servicio.id).update(profesional_id=profesional_obj.id)
        
        # 3. Reasignamos los turnos existentes
        Turno.objects.filter(servicio_id=servicio.id).update(profesional_id=profesional_obj.id)

class Migration(migrations.Migration):

    dependencies = [
        ('myapp', '0021_alter_dianodisponible_motivo'),
    ]

    operations = [
         # --- FASE 1: Crear el nuevo modelo y añadir las nuevas columnas como OPCIONALES ---
        migrations.CreateModel(
            name='Profesional',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(help_text="Nombre del miembro del equipo, ej: 'Dra. Ana Pérez' o 'Estilista Juan'", max_length=100)),
                ('email', models.EmailField(blank=True, help_text='Email opcional para notificaciones internas.', max_length=254, null=True)),
                ('foto', models.ImageField(blank=True, null=True, upload_to='fotos_profesionales/')),
                ('activo', models.BooleanField(default=True, help_text='Desmarcar para que no aparezca como opción para reservar turnos.')),
                ('servicio', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='profesionales', to='myapp.servicio')),
                ('sub_servicios_ofrecidos', models.ManyToManyField(blank=True, help_text='Selecciona qué servicios específicos ofrece esta persona.', to='myapp.subservicio')),
            ],
        ),
        migrations.AddField(
            model_name='horariolaboral',
            name='profesional',
            # La clave es añadirlo como null=True temporalmente
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='horarios', to='myapp.profesional'),
        ),
        migrations.AddField(
            model_name='dianodisponible',
            name='profesional',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='dias_no_disponibles', to='myapp.profesional'),
        ),
         migrations.AddField(
            model_name='turno',
            name='profesional',
            field=models.ForeignKey(null=True, blank=True, on_delete=django.db.models.deletion.SET_NULL, related_name='turnos_asignados', to='myapp.profesional'),
        ),

        # --- FASE 2: Ejecutar nuestro código para rellenar los datos ---
        migrations.RunPython(crear_profesionales_y_reasignar_datos),

        # --- FASE 3: Ahora que los datos están rellenos, quitamos los campos antiguos y hacemos los nuevos obligatorios ---
        migrations.RemoveField(
            model_name='horariolaboral',
            name='servicio',
        ),
        migrations.RemoveField(
            model_name='dianodisponible',
            name='servicio',
        ),
        migrations.AlterField(
            model_name='horariolaboral',
            name='profesional',
            # Volvemos a ponerlo como obligatorio (null=False)
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='horarios', to='myapp.profesional'),
        ),
        migrations.AlterField(
            model_name='dianodisponible',
            name='profesional',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='dias_no_disponibles', to='myapp.profesional'),
        ),
        migrations.AlterUniqueTogether(
            name='turno',
            unique_together={('profesional', 'fecha', 'hora')},
        ),

    ]
